public Vector3 scaleFactor(Vector3 point1, Vector3 point2)
        {
            Vector3 distance = point1 - point2;
            if (distance.x > 0)
            {
                return new Vector3(0.2f, distance.x / 2, 0.2f);
            }
            else if (distance.y > 0)
            {
                return new Vector3(0.2f, distance.y / 2, 0.2f);
            }
            else if (distance.z > 0)
            {
                return new Vector3(0.2f, distance.z / 2, 0.2f);
            }
            else if (distance.x < 0)
            {
                return new Vector3(0.2f, Mathf.Abs(distance.x) / 2, 0.2f);
            }
            else if (distance.y < 0)
            {
                return new Vector3(0.2f, Mathf.Abs(distance.y) / 2, 0.2f);
            }
            else if (distance.z < 0)
            {
                return new Vector3(0.2f, Mathf.Abs(distance.z) / 2, 0.2f);
            }
            else return new Vector3(0.2f, 0.2f, 0.2f);
        }

        public Vector3 CalculateRotation(Vector3 point1, Vector3 point2, Vector3 point3)
        {
            Vector3 distance1 = point2 - point1;
            Vector3 distance2 = point3 - point2;
            Vector3 rotation = new Vector3(0, 0, 0);
            if (distance1.x > 0)
            {
                if(distance2.y > 0)
                {
                    rotation = new Vector3(0, 0, 180);
                }
                else if(distance2.y < 0)
                {
                    rotation = new Vector3(0, 0, 270);
                }
                else if(distance2.z > 0)
                {
                    rotation = new Vector3(90, 0, 180);
                }
                else if(distance2.z < 0)
                {
                    rotation = new Vector3(-90, 0, 180);
                }
            }
            else if (distance1.y > 0)
            {
                if (distance2.x > 0)
                {
                    rotation = new Vector3(0, 0, 0);
                }
                else if (distance2.x < 0)
                {
                    rotation = new Vector3(0, 180, 0);
                }
                else if (distance2.z > 0)
                {
                    rotation = new Vector3(0, 270, 0);
                }
                else if (distance2.z < 0)
                {
                    rotation = new Vector3(0, 90, 0);
                }
            }
            else if (distance1.y < 0)
            {
                if (distance2.x > 0)
                {
                    rotation = new Vector3(0, 0, 90);
                }
                else if (distance2.x < 0)
                {
                    rotation = new Vector3(0, 180, 0);
                }
                else if (distance2.z > 0)
                {
                    rotation = new Vector3(0, 270, 0);
                }
                else if (distance2.z < 0)
                {
                    rotation = new Vector3(0, 90, 90);
                }
            }
            else if (distance1.z > 0)
            {
                if (distance2.x > 0)
                {
                    rotation = new Vector3(90, 0, 0);
                }
                else if (distance2.x < 0)
                {
                    rotation = new Vector3(90, 90, 0);
                }
                else if (distance2.y > 0)
                {
                    rotation = new Vector3(180, 90, 0);
                }
                else if (distance2.y < 0)
                {
                    rotation = new Vector3(0, 90, 0);
                }
            }
            else if (distance1.z < 0)
            {
                if (distance2.x > 0)
                {
                    rotation = new Vector3(90, 270, 0);
                }
                else if (distance2.x < 0)
                {
                    rotation = new Vector3(270, 270, 0);
                }
                else if (distance2.y > 0)
                {
                    rotation = new Vector3(180, 270, 0);
                }
                else if (distance2.y < 0)
                {
                    rotation = new Vector3(0, 270, 0);
                }
            }
            return rotation;
        }


        public Vector3 CalculateRotation(Vector3 point1, Vector3 point2)
        {
            Vector3 distance = point1 - point2;
            Vector3 rotation = new Vector3(0,0,0);
            if(distance.x > 0)
            {
                rotation = new Vector3(0, 0, 1);
            }
            else if(distance.y > 0)
            {
                rotation = new Vector3(0, 1, 0);
            }
            else if(distance.z > 0)
            {
                rotation = new Vector3 (1, 0, 0);
            }
            else if(distance.x < 0)
            {
                rotation = new Vector3(0, 0, 1);
            }
            else if(distance.y < 0)
            {
                rotation = new Vector3(0, 0, 0);
            }
            else if(distance.z < 0)
            {
                rotation = new Vector3(1, 0, 0);
            }

            return rotation;
        }


        public void DeletePipe()
        {
            foreach (GameObject pipePart in pipeParts)
            {
                DestroyImmediate(pipePart);
            }
        }


        public void CreatePipe()
        {
            for(int i = 1; i < points.Count-1; i++)
            {
                Vector3 rotation = CalculateRotation(points[i].position, points[i - 1].position);
                GameObject part = Instantiate(pipePart, transform.TransformPoint((points[i - 1].position + points[i].position) / 2), Quaternion.Euler(rotation*90), pipeParent.transform);
                part.transform.localScale = (scaleFactor(points[i].position, points[i - 1].position));
                pipeParts.Add(part);
                rotation = CalculateRotation(points[i-1].position, points[i].position, points[i + 1].position);
                part = Instantiate(cornerPart, transform.TransformPoint(points[i].position), Quaternion.Euler(rotation ), pipeParent.transform);
                pipeParts.Add(part);
            }
            GameObject lastPart = Instantiate(pipePart, transform.TransformPoint((points[points.Count-2].position + GetLastPoint()) / 2), Quaternion.Euler(90, 0, 0), pipeParent.transform);
            lastPart.transform.localScale = scaleFactor(points[GetLastPointIndex()].position, points[GetLastPointIndex() - 1].position);
            pipeParts.Add(lastPart);
        }